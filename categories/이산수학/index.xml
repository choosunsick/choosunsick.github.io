<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>이산수학 on Sunsick&#39;s blog</title>
    <link>https://choosunsick.github.io/categories/%EC%9D%B4%EC%82%B0%EC%88%98%ED%95%99/</link>
    <description>Recent content in 이산수학 on Sunsick&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <lastBuildDate>Wed, 28 Jul 2021 21:16:26 +0900</lastBuildDate><atom:link href="https://choosunsick.github.io/categories/%EC%9D%B4%EC%82%B0%EC%88%98%ED%95%99/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>몬테카를로 시뮬레이션 - 시뮬레이션 회수에 따른 실험</title>
      <link>https://choosunsick.github.io/post/montecalo_test2/</link>
      <pubDate>Wed, 28 Jul 2021 21:16:26 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/montecalo_test2/</guid>
      <description>이전 글 에서 시뮬레이션 회수에 대비해 실제 파이 값과 어느 정도로 차이가 나는지에 대한 실험을 해보겠습니다. 이번에는 시뮬레이션 회수를 변경해 가면서 실험합니다.</description>
    </item>
    
    <item>
      <title>몬테카를로 시뮬레이션 점 개수에 대한 실험</title>
      <link>https://choosunsick.github.io/post/montecalo_test1/</link>
      <pubDate>Tue, 27 Jul 2021 19:23:09 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/montecalo_test1/</guid>
      <description>이번에는 점 개수가 늘어날 때 실제 파이 값과 실제로 가까워 지는지 확인 해보겠습니다. 실험의 계획은 다음과 같습니다. 먼저 점 개수를 1000 ~ 100,000개 까지 10</description>
    </item>
    
    <item>
      <title>몬테카를로 시뮬레이션을 통한 파이값 추정 작동시간 비교하기</title>
      <link>https://choosunsick.github.io/post/montecalo_pyvsrs/</link>
      <pubDate>Thu, 22 Jul 2021 18:41:12 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/montecalo_pyvsrs/</guid>
      <description>파이값을 추정하는 몬테카를로 시뮬레이션을 파이썬과 Rust로 구현하고 작동 시간을 비교합니다. 몬테카를로 시뮬레이션에 대한 설명은 링크를 통해 확인하실 수 있</description>
    </item>
    
    <item>
      <title>베이지안 스팸 필터</title>
      <link>https://choosunsick.github.io/post/baysian_spam/</link>
      <pubDate>Tue, 20 Jul 2021 17:46:07 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/baysian_spam/</guid>
      <description>3월부터 공부한 이산수학 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 통계학과 이산 수학에서 자주 등장하는 조건부 확률과 베이즈 정리를 이용</description>
    </item>
    
    <item>
      <title>몬테카를로 시뮬레이션</title>
      <link>https://choosunsick.github.io/post/montecalo/</link>
      <pubDate>Sat, 17 Jul 2021 16:15:35 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/montecalo/</guid>
      <description>아주 기초적인 단계를 지나, 통계학과 기계학습을 공부하다 보면, ‘몬테카를로’라는 단어를 접하게 됩니다. 전공으로 이런 분야를 접하지 않고 마구잡이로 공부한 저</description>
    </item>
    
    <item>
      <title>순열과 조합</title>
      <link>https://choosunsick.github.io/post/permuandcombi/</link>
      <pubDate>Thu, 15 Jul 2021 15:30:59 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/permuandcombi/</guid>
      <description>3월부터 공부한 이산수학 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 조합과 순열의 특징 순열과 조합은 모두 숫자를 나열하는 방법의 수를 나타</description>
    </item>
    
    <item>
      <title>파이썬과 Rust 프로그래밍 코드 성능 비교</title>
      <link>https://choosunsick.github.io/post/pythonvsrust/</link>
      <pubDate>Wed, 14 Jul 2021 17:33:06 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/pythonvsrust/</guid>
      <description>파이썬과 Rust 프로그래밍 간 내장 정렬, 버블, 삽입, 합병, 퀵 정렬 알고리즘을 구현하고 서로 작동 시간을 비교해 봅니다. 공정한 비교를 위해 10만개의 정렬되지 않은</description>
    </item>
    
    <item>
      <title>피보나치 수열</title>
      <link>https://choosunsick.github.io/post/discreate_math_9/</link>
      <pubDate>Tue, 13 Jul 2021 19:41:57 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_9/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 피보나치 수열 풀이 방식 비교 피보나치 수열을 계산하는 알고리</description>
    </item>
    
    <item>
      <title>정렬 알고리즘 총 정리</title>
      <link>https://choosunsick.github.io/post/discreate_math_8/</link>
      <pubDate>Sat, 10 Jul 2021 17:44:40 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_8/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 정렬 알고리즘 시간 비교 Rust 내장 정렬, 버블 정렬, 삽입 정렬,</description>
    </item>
    
    <item>
      <title>퀵 정렬(quick sort)</title>
      <link>https://choosunsick.github.io/post/discreate_math_7/</link>
      <pubDate>Fri, 09 Jul 2021 15:57:20 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_7/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 퀵 정렬의 시간복잡도 퀵 정렬은 평균적으로 nlog n의 시간복잡도</description>
    </item>
    
    <item>
      <title>재귀 알고리즘</title>
      <link>https://choosunsick.github.io/post/discreate_math_6/</link>
      <pubDate>Thu, 08 Jul 2021 17:06:49 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_6/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 재귀 알고리즘의 장점과 단점 선형 탐색과 이진 탐색 알고리즘은</description>
    </item>
    
    <item>
      <title>합병 정렬(merge sort)</title>
      <link>https://choosunsick.github.io/post/discreate_math_5/</link>
      <pubDate>Wed, 07 Jul 2021 17:16:43 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_5/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 합병 정렬의 시간복잡도 합병 정렬의 시간복잡도는 최선의 경우</description>
    </item>
    
    <item>
      <title>삽입 정렬(insertion sort)</title>
      <link>https://choosunsick.github.io/post/discreate_math_4/</link>
      <pubDate>Tue, 06 Jul 2021 11:40:52 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_4/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 삽입 정렬의 시간복잡도 삽입 정렬의 시간복잡도는 입력 자료의</description>
    </item>
    
    <item>
      <title>버블 정렬(bubble sort)</title>
      <link>https://choosunsick.github.io/post/discreate_math_3/</link>
      <pubDate>Mon, 05 Jul 2021 17:26:55 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_3/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 버블 정렬의 시간복잡도 버블 정렬 시간복잡도는 최선의 경우,</description>
    </item>
    
    <item>
      <title>이진 탐색(binary_search)</title>
      <link>https://choosunsick.github.io/post/discreate_math_2/</link>
      <pubDate>Sun, 04 Jul 2021 21:12:31 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_2/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 이진 탐색의 시간복잡도 이진 탐색의 시간 복잡도는 최상의 경우</description>
    </item>
    
    <item>
      <title>선형 탐색(linear_search)</title>
      <link>https://choosunsick.github.io/post/discreate_math_1/</link>
      <pubDate>Sun, 04 Jul 2021 13:15:12 +0900</pubDate>
      
      <guid>https://choosunsick.github.io/post/discreate_math_1/</guid>
      <description>3월부터 공부한 이산수학 알고리즘 개념들을 정리합니다. 교재는 Rosen의 이산수학 8판 입니다. 선형 탐색의 시간복잡도 선형 탐색의 시간 복잡도는 최상의 경우</description>
    </item>
    
  </channel>
</rss>
